---
    import Page from "./Page.astro";
    import Output from "./Output.astro";
    interface Props {
        title: string
        backgroundColor?: string
        align?: string | undefined
        output?: string | undefined
        slidesLength: number
    }

    const { title, backgroundColor, align, output, slidesLength } = Astro.props as Props

    const alignment = align ?? "center"
---

<Page title={title} backgroundColor={backgroundColor}>
    <div transition:animate="slide">
        <div id="max-length" data-max={slidesLength}></div>
        <div id="slide">
            <div id="wrapper">
                <slot />
            </div>
            {output && <div id="output">
                <h2 class="sub">Output: </h2>
                <Output layout={output} />
            </div>}
        </div>
    </div>
</Page>

<script>
    import { navigate } from "astro:transitions/client";

    document.addEventListener("astro:page-load", () => {
        document.addEventListener("keydown", (event) => {
            if (event.key != "ArrowRight" && event.key != "ArrowLeft") {
                return
            }
            const current = window.location.href
            const end = current.lastIndexOf("/") + 1
            const currentSlideNumber = parseInt(current.slice(end))
            const op = event.key === "ArrowRight" ? 1 : -1
            const newSlideNumber = currentSlideNumber + op
            const maxSlideNumber = document.getElementById("max-length")?.dataset.max
            if (!newSlideNumber || maxSlideNumber && +maxSlideNumber < newSlideNumber) return
            const prefix = "0"
            const targetLength = 2
            const newUrl = current.slice(0, end) + prefix.repeat(targetLength - newSlideNumber.toString().length) + newSlideNumber
            navigate(newUrl)
            op < 0 && history.back()
        });



    }, { once: true })


</script>



<style is:global define:vars={{alignment}}>
    #wrapper {
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        justify-content: center;
        align-items: var(--alignment);
        flex-grow: 1;
    }

    #slide {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        min-height: 70vh;
    }

    #wrapper>.astro-code {
        padding: 1em;
        font-size: larger;
        border-radius: 15px;
    }

    #wrapper {
        max-height: 90vh;
        margin-bottom: 5vh;
    }

    #wrapper>* {
        text-align: justify;
        color: var(--white);
        font-size: 3vh;
        margin: 1vw 0;
    }

    #wrapper>p>img {
        max-width: 40vw;
        height: auto;
    }

    #wrapper>p>code {
        color: var(--light-yellow);
        background-color: var(--lighter-grey);
        border-radius: 8px;
        padding: 5px;
    }

    #wrapper>ul>li>code {
        color: var(--light-yellow);
        background-color: var(--lighter-grey);
        border-radius: 8px;
        padding: 5px;
    }


    #wrapper>ul>li>*>code {
        color: var(--light-yellow);
        background-color: var(--lighter-grey);
        border-radius: 8px;
        padding: 5px;
    }

    #wrapper>ul>li {
        padding: 15px;
    }

    img {
        max-width: 100%;
        max-height: 100%;
    }

    #output {
        background-color: rgb(59, 58, 58);
        padding: 10px 20px 10px 20px;
        border-radius: 15px;
        min-width: 35vw;
        align-self: center;
    }

    #wrapper>blockquote>p {
        font-style: italic;
        background-color: #1b1e24;
        font-size: large;
        border-top: 5px solid #a17740;
        padding: 20px;
        color: var(--off-white);
        border-radius: 10px;
    }

    .sub {
        color: var(--white);
    }
</style>